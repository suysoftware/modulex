name: Release and Version Bump

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install toml
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Determine version bump type
      id: version-type
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
        else
          # Commit mesajlarÄ±na gÃ¶re version type belirle
          COMMITS=$(git log --oneline $(git describe --tags --abbrev=0)..HEAD 2>/dev/null || git log --oneline)
          
          if echo "$COMMITS" | grep -i -E "(breaking|major)"; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -i -E "(feat|feature|minor)"; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi
        fi
    
    - name: Get current version
      id: current-version
      run: |
        CURRENT_VERSION=$(python -c "import toml; print(toml.load('py/pyproject.toml')['project']['version'])")
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
    
    - name: Create version bump script
      run: |
        cat > bump_version.py << 'EOF'
        import toml
        import os
        import sys
        
        # Version type'Ä± command line'dan al
        version_type = sys.argv[1] if len(sys.argv) > 1 else 'patch'
        
        # Config dosyasÄ±nÄ± oku
        config = toml.load('py/pyproject.toml')
        current_version = config['project']['version']
        major, minor, patch = map(int, current_version.split('.'))
        
        # Yeni version hesapla
        if version_type == 'major':
            new_version = f'{major + 1}.0.0'
        elif version_type == 'minor':
            new_version = f'{major}.{minor + 1}.0'
        else:  # patch
            new_version = f'{major}.{minor}.{patch + 1}'
        
        # Config dosyasÄ±nÄ± gÃ¼ncelle
        config['project']['version'] = new_version
        
        # DosyayÄ± kaydet
        with open('py/pyproject.toml', 'w') as f:
            toml.dump(config, f)
        
        print(f'Version updated from {current_version} to {new_version}')
        print(f'NEW_VERSION={new_version}')
        EOF
    
    - name: Bump version
      id: bump-version
      run: |
        VERSION_OUTPUT=$(python bump_version.py "${{ steps.version-type.outputs.type }}")
        NEW_VERSION=$(echo "$VERSION_OUTPUT" | grep "NEW_VERSION=" | cut -d'=' -f2)
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Version bumped to: $NEW_VERSION"
    
    - name: Create changelog entry
      run: |
        NEW_VERSION="${{ steps.bump-version.outputs.version }}"
        DATE=$(date +%Y-%m-%d)
        
        # Git log'u al
        CHANGES=$(git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD 2>/dev/null | sed 's/^/- /' || echo "- Initial release")
        
        # Changelog'u gÃ¼ncelle
        echo "# Changelog" > new_changelog.md
        echo "" >> new_changelog.md
        echo "## [$NEW_VERSION] - $DATE" >> new_changelog.md
        echo "" >> new_changelog.md
        echo "### Changes" >> new_changelog.md
        echo "$CHANGES" >> new_changelog.md
        echo "" >> new_changelog.md
        
        # Mevcut changelog'u ekle (varsa)
        if [ -f CHANGELOG.md ]; then
          tail -n +2 CHANGELOG.md >> new_changelog.md
        fi
        
        mv new_changelog.md CHANGELOG.md
    
    - name: Commit changes
      run: |
        git add .
        git commit -m "ðŸ”– Bump version to ${{ steps.bump-version.outputs.version }}"
        git push origin main
    
    - name: Create tag
      run: |
        git tag -a "v${{ steps.bump-version.outputs.version }}" -m "Release v${{ steps.bump-version.outputs.version }}"
        git push origin "v${{ steps.bump-version.outputs.version }}"
    
    - name: Generate release notes
      run: |
        NEW_VERSION="${{ steps.bump-version.outputs.version }}"
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGES=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
        else
          CHANGES=$(git log --pretty=format:"- %s" --max-count=10)
        fi
        
        cat > release_notes.md << EOF
## ðŸš€ What's New in v${NEW_VERSION}

### Changes
${CHANGES}

### ðŸ“¦ Docker Images
- \`your-username/modulex:latest\`
- \`your-username/modulex:v${NEW_VERSION}\`

### ðŸ”§ Installation
\`\`\`bash
docker pull your-username/modulex:v${NEW_VERSION}
docker run -p 8000:8000 your-username/modulex:v${NEW_VERSION}
\`\`\`

### ðŸ“– Documentation
- [GitHub Repository](https://github.com/suysoftware/modulex)
- [API Documentation](http://localhost:8000/docs)
EOF
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump-version.outputs.version }}
        name: Release v${{ steps.bump-version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
    
    - name: Cleanup
      run: |
        rm -f bump_version.py 